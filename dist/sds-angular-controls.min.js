/*! sds-angular-controls - v0.0.1 - 2014-12-17
* https://github.com/SMARTDATASYSTEMSLLC/sds-angular-controls
* Copyright (c) 2014 Steve Gentile, David Benson; Licensed  */
angular.module("sds-angular-controls",["ui.bootstrap","toggle-switch"]),function(){"use strict";function a(){return function(a){return a.toLowerCase().replace(/ (\w)/g,function(a,b){return b.toUpperCase()})}}angular.module("sds-angular-controls").filter("camelCase",a)}(),function(){"use strict";function a(a,b){return{restrict:"EA",templateUrl:"sds-angular-controls/formField.html",scope:{record:"=",field:"@",toggleField:"@?",rightLabel:"@",items:"=?",placeholder:"@",max:"@?",min:"@",type:"@",fieldType:"@",onLabel:"@",offLabel:"@",toggleSwitchType:"@",mask:"@",label:"@",isRequired:"=?",layout:"@",labelLayoutCss:"@",inputLayoutCss:"@",errorLayoutCss:"@",hideValidationMessage:"=?",disableTimepicker:"=?",showLabel:"=?",dateFormat:"@",isReadonly:"=?",style:"@?"},require:"^form",link:function(c,d,e,f){function g(){if(c.isReadonly&&c.record&&c.record[c.field]){if("select"===c.fieldType){var a=c.items[c.record[c.field]];c.readOnlyModel=a}"toggle"===c.fieldType&&(c.readOnlyModel=c.record[c.field]),"quickdatepicker"===c.fieldType&&(c.readOnlyModel=moment(c.record[c.field]).format(c.dateFormat))}}c.calender={opened:!1},c.types=a,c.fieldType=c.fieldType||"input",c.isReadonly=c.isReadonly||!1,c.layout=c.layout||"stacked",c.isRequired=c.isRequired||!1,c.showLabel=c.showLabel||!0,c.hideValidationMessage=c.hideValidationMessage||!1,"inline"===c.layout&&(c.labelLayoutCss=c.labelLayoutCss||"col-md-4",c.inputLayoutCss=c.inputLayoutCss||"col-md-6",c.errorLayoutCss=c.errorLayoutCss||"col-md-4"),c.toggleSwitchType=c.toggleSwitchType||"primary",c.onLabel=c.onLabel||"Yes",c.offLabel=c.offLabel||"No",c.disableTimepicker=c.disableTimepicker||!1,c.dateFormat=c.dateFormat||"MM-dd-yyyy",c.label||(c.label=b("labelCase")(c.field));var h=d.find(".inputField");c.orderHash=function(a){return a?a.orderedKeys||Object.keys(a):[]},c.convertType=function(a){return c.record&&c.record[c.field]&&"string"==typeof c.record[c.field]?a.toString():a&&!isNaN(parseInt(a,10))?parseInt(a,10):a},c.$watch("isReadonly",function(a,b){a!==b&&g()}),c.$watch("record",function(a,b){a!==b&&g()}),c.mask&&h.mask(c.mask),c.open=function(a){a.preventDefault(),a.stopPropagation(),c.calender.opened=!0},c.showError=function(a){try{return f.$submitted?a.$invalid:a.$dirty&&a.$invalid}catch(b){return!1}}}}}a.$inject=["InputTypes","$filter","$log"],angular.module("sds-angular-controls").value("InputTypes",{text:["Text","should be text"],email:["Email","should be an email address"],number:["Number","should be a number"],date:["Date","should be a date"],datetime:["Datetime","should be a datetime"],time:["Time","should be a time"],month:["Month","should be a month"],week:["Week","should be a week"],url:["URL","should be a URL"],tel:["Phone Number","should be a phone number"],color:["Color","should be a color"]}).directive("formField",a)}(),angular.module("sds-angular-controls").run(["$templateCache",function(a){"use strict";a.put("sds-angular-controls/formField.html",'<div> <div ng-if="layout === \'stacked\'" class="form-group clearfix" ng-form="{{field}}" ng-class="{ \'has-error\': showError({{field}}) }"> <label ng-if="showLabel" class="control-label {{labelLayoutCss}}"> {{ label }} <span ng-if="isRequired && !isReadonly">*</span></label> <div class="clearfix"> <ng-include src="\'sds-angular-controls/formFieldControls.html\'"></ng-include> </div> <!-- validation --> <div ng-if="!hideValidationMessage" class="pull-left has-error" ng-show="showError({{field}})" ng-messages="{{field}}.$error"> <span class="control-label" ng-message="required"> {{ field | labelCase }} is required. </span> <span class="control-label" ng-message="min"> {{ field | labelCase }} must be at least {{min}}. </span> <span class="control-label" ng-message="max"> {{ field | labelCase }} must not exceed {{max}} </span> <span class="control-label" ng-repeat="(k, v) in types" ng-message="{{k}}"> {{ field | labelCase }}{{v[1]}}</span> </div> </div> <div ng-if="layout === \'inline\'" class="form-group clearfix" ng-form="{{field}}" ng-class="{ \'has-error\': showError({{field}}) }"> <label ng-if="showLabel" class="control-label {{labelLayoutCss}}"> {{ label }} <span ng-if="isRequired && !isReadonly">*</span></label> <div class="{{inputLayoutCss}}"> <ng-include src="\'directive/formField/formFieldControls.html\'"></ng-include> </div> <div ng-if="!hideValidationMessage" ng-show="showError({{field}})" class="popover right alert-danger" style="display:inline-block; top:auto; left:auto; margin-top:-6px; min-width:240px"> <div class="arrow" style="top: 50%"></div> <div class="popover-content" ng-messages="{{field}}.$error"> <div ng-message="required"> {{ field | labelCase }} is required. </div> <div ng-message="min"> {{ field | labelCase }} must be at least {{min}}. </div> <div ng-message="max"> {{ field | labelCase }} must not exceed {{max}} </div> <div ng-repeat="(k, v) in types" ng-message="{{k}}"> {{ field | labelCase }} {{v[1]}}</div> </div> </div> <!----> <!--<div ng-if="!hideValidationMessage" class=\'{{errorLayoutCss}} has-error\'--> <!--ng-show=\'showError({{field}})\' ng-messages=\'{{field}}.$error\'>--> <!--<p class=\'control-label\' ng-message=\'required\'> {{ field | labelCase }} is required. </p>--> <!--<p class=\'control-label\' ng-message=\'min\'> {{ field | labelCase }} must be at least {{min}}. </p>--> <!--<p class=\'control-label\' ng-message=\'max\'> {{ field | labelCase }} must not exceed {{max}} </p>--> <!--<p class=\'control-label\' ng-repeat=\'(k, v) in types\' ng-message=\'{{k}}\'> {{ field | labelCase }}--> <!--{{v[1]}}</p>--> <!--</div>--> </div> <ng-include ng-if="layout === \'grid\'" src="\'directive/formField/formFieldControls.html\'"></ng-include> </div>'),a.put("sds-angular-controls/formFieldControls.html",'<!-- input --> <div ng-if="::fieldType === \'input\'"> <input ng-readonly="isReadonly" style="{{::style}}" class="form-control inputField {{::inputLayoutCss}}" ng-model="record[field]" type="{{::type}}" ng-required="isRequired" max="{{::max}}" min="{{::min}}"> <div ng-if="::(rightLabel && rightLabel.length > 0)" class="rightLabel">{{::rightLabel}}</div> </div> <!-- numeric --> <input ng-if="::fieldType === \'autonumeric\'" style="{{::style}}" ng-readonly="isReadonly" type="text" auto-numeric class="form-control inputField {{::inputLayoutCss}}" ng-model="record[field]" max="{{::max}}" min="{{::min}}" ng-required="isRequired"> <!-- textarea --> <textarea ng-if="::fieldType == \'textarea\'" ng-readonly="isReadonly" class="form-control fullscreen inputField {{::inputLayoutCss}}" ng-model="record[field]" type="{{::type}}" style="{{::style}}" ng-required="isRequired"></textarea> <!-- toggle --> <div ng-if="::fieldType === \'toggle\'"> <toggle-switch style="{{::style}}" class="{{::toggleSwitchType}}" ng-model="record[field]" on-label="{{::onLabel}}" off-label="{{::offLabel}}"> </toggle-switch> <!--<input ng-if="isReadonly" style="{{::style}}" ng-readonly="isReadonly" type=\'text\'--> <!--class="form-control inputField {{::inputLayoutCss}}" ng-model=\'readOnlyModel\'/>--> <div ng-if="isReadonly" class="rightLabel">{{record[field] ? onLabel : offLabel}}</div> </div> <!-- texttoggle --> <div ng-if="::fieldType === \'texttoggle\'" class="{{::inputLayoutCss}} text-toggle"> <input type="text" style="{{::style}}" ng-readonly="isReadonly" type="{{::type}}" class="form-control inputField" ng-model="record[field]"> <toggle-switch ng-if="!isReadonly" class="{{::toggleSwitchType}}" ng-model="record[toggleField]" on-label="{{::onLabel}}" off-label="{{::offLabel}}"> </toggle-switch> <div ng-if="isReadonly" class="rightLabel">{{record[field] ? onLabel : offLabel}}</div> </div> <div ng-if="::fieldType === \'select\'"> <select ng-if="!isReadonly && !hasFilter" ng-readonly="isReadonly" class="form-control" name="{{::field}}" ng-model="record[field]" ng-options="convertType(key) as items[key] for key in orderHash(items)" ng-required="isRequired"></select> <!-- optionValue as optionLabel for arrayItem in array --> <input ng-if="isReadonly" style="{{::style}}" ng-readonly="isReadonly" type="text" class="form-control inputField {{::inputLayoutCss}}" ng-model="readOnlyModel"> </div> <!-- quickdatapicker --> <span class="input-group" ng-if="::fieldType === \'quickdatepicker\'"> <input type="text" style="{{::style}}" class="form-control datepicker ng-if=" isreadonly ng-readonly="isReadonly" placeholder="{{placeholder}}" ng-model="record[field]" ng-required="::isRequired" min-date="::min" max-date="::max" datepicker-popup="{{::dateFormat}}" is-open="calender.opened"> <span ng-if="!isReadonly" class="input-group-btn"> <button type="button" class="btn btn-default" ng-click="open($event)"><i class="glyphicon glyphicon-calendar"></i></button> </span> </span>')}]);